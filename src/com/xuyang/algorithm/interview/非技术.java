package com.xuyang.algorithm.interview;

/**
 * @Auther: allanyang
 * @Date: 2020/1/15 10:31
 * @Description:
 */
public class 非技术 {

    // 0.自我介绍

    // 1.你在项目中中到过什么问题，是如何解决的？
    /**
     * 1.我们这边有一个基础服务，推荐码服务，就是用户注册后会绑定一个推荐码，用来判断用户是通过哪个渠道来的。会有接口提供用户通过哪个渠道进来的，可以做一些不同的业务逻辑。但是现金测做秒杀活动（持续一周），没有通知到我们这边，造成晚上0点的时候系统获取不到数据库连接造成大量线程阻塞，从而导致服务过载而报警。第一天出现了报警，首先通过接口调用链路找到对应的负责人，知道了秒杀活动，但是后续还会持续一周的时间。考虑了一下这个地方想要抗住高并发，长久之计需要从缓存方向考虑，但是当天晚上就需要承受较高的并发量，综合考虑了一下，现紧急进行机器扩容，当天晚上平滑度过峰值。服务缓存化，服务缓存化的时候会考虑比较多的问题，1.缓存预警，2.缓存雪崩，缓存击穿，缓存穿透，3.缓存一致性问题，4.版本号问题。（服务缓存之后要对缓存和数据库中数据对账处理，判断数据是否一致）进行提供新接口。此时很可能接口是不问稳定的，首先自测试肯定的，然后迁移自己的非核心新业务接口进行观察，观察一段时间没问题后，通知自己组内进行接口迁移，迁移过程中要需要测试同学介入。之后再观察一段时间后向部门内部推进接口迁移，最后再通知其他部门同学进行接口迁移。
     *
     * 2.突然收到永久带使用率超过98%的告警，永久带是用来存储字符串常量和类信息的，出现这一个告警我的第一反应是两种情况，1，内存泄漏，2，永久带默认是20~82m，超过了范围，3，告警机制错误。为了排查是否是告警机制错误，首先用jmap -heap查看下内存使用状态，发现的确是使用率超过了98，已经99点多了，估算了一下大约占用了80多M的内存。用jmap -histo查询了一下对内存状态，发现我的字符串类型占用了过大的使用空间，看到字符串占用很大，我的第一反应是字符串使用了+进行连接，我之前是看过字符串内存分配相关知识的，如果用+进行连接会在永久带产生大量的中间辅助传状态。于是我看了一下近期提交的代码，发现有一处代码用的+进行连接，切产生的变量幅度很大，因此是推断此处导致的内存使用率过高。将代码改正后，又想了一下其他可能导致内存溢出的原因，没有想到其他原因了，所以先将代码推上线观察。经过一段时间的观察发现告警消失了，从而解决了这个问题。
     */

    // 2.如何学习一项新技术，比如如何学习Java的，重点学习什么
    /**
     * 首先学习一项新技能最快的方式就是先通过百度，博客，官网等地方学习，并且只挑简单的地方看，不要深入细节。例如说netty，最重要的是先知道他是干什么的，他是一个网络通信框架，其实就是一个BIO的加强版。理解了他是干什么的时候开始第二部学习，如何使用，这个时候就要通过较高的地方来学习了，建议找视频，或者官网或书籍，最好不要用博客，因为很可能是错误的导致你运行不起来。（我建议先看视频，因为他会手把手教你，起码在第一次使用的时候建议用视频照着他做就好了），然后进一步通过官网，数据来再深入的学习。第三部，了解底层原理，此时相关内容就比较少了，建议只看官网和书籍，因为他们是比较权威的，其他的地方很可能给你带错。接下来，找个项目来实际应用一下，例如写个简单版的rpc框架，简单版通信框架。
     */

    // 3.有关注哪些新的技术
    /**
     * 1.设计模式和算法的学习不能落下，基本功。1.spirng cloud方向，2.搜索引擎，esearch。3.偏大数据，hadoop，mapreduce。4.其他语言，go，python
     */

    // 4.工作任务非常多非常杂时如何处理
    /**
     * 1.学会拒绝，例如工作已经明显达到饱和量了，而此时老板或者产品还给你提供新的需求，和上级说明白，工作已经饱和，忙不过来，除非这个需求很重要，不过接了这个任务可能就要放弃一些其他任务，后者把其他任务的排期向后移。
     * 2.学会对工作任务进行优先级的一个划分，线上事故需要解决，这个优先级肯定放在第一位，正常需求，排中间，开会等问题提前规划好时间。
     * 3.项目中可能会出现什么问题要考虑好，尤其是任务很多的时候出现问题的概率会增加，要考虑要如果出错了怎么办。
     * 4.一些比较杂的任务可以适当的让其他人帮你上线。
     * 5.考虑是什么原因导致工作很多的，是自己能力不足，还是重复造轮子，想解决办法。
     */
}